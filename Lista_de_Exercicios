Intermedi√°rio
11.	Pe√ßa ao usu√°rio uma frase e conte quantas vogais h√° nela.
12.	Solicite um n√∫mero e exiba se ele √© primo ou n√£o.
13.	Gere uma lista de 10 n√∫meros aleat√≥rios e exiba o maior e o menor n√∫mero.
14.	Pe√ßa ao usu√°rio uma palavra e exiba se ela √© um pal√≠ndromo.
15.	Solicite um n√∫mero inteiro e converta para bin√°rio sem usar fun√ß√µes prontas.
16.	Pe√ßa ao usu√°rio um n√∫mero e exiba a sequ√™ncia de Fibonacci at√© esse n√∫mero.
17.	Solicite ao usu√°rio uma frase e exiba a quantidade de palavras que ela cont√©m.
18.	Leia um n√∫mero inteiro e informe se ele √© um quadrado perfeito.
19.	Pe√ßa uma data no formato "DD/MM/AAAA" e exiba o dia, m√™s e ano separadamente.
20.	Construa um programa que sorteia um n√∫mero entre 1 e 100 e permita que o usu√°rio tente adivinhar.
________________________________________
Intermedi√°rio-Avan√ßado
21.	Pe√ßa uma lista de n√∫meros e exiba os n√∫meros ordenados sem usar .sort().
22.	Crie um sistema de cadastro de usu√°rios armazenando nome e idade em um dicion√°rio.
23.	Desenvolva um programa que simule um caixa eletr√¥nico com op√ß√µes de saque, dep√≥sito e saldo.
24.	Crie um jogo de pedra, papel e tesoura contra o computador.
25.	Leia um arquivo .txt e conte quantas palavras h√° nele.
26.	Desenvolva um programa que calcule o fatorial de um n√∫mero usando recurs√£o.
27.	Crie um algoritmo que gere todas as combina√ß√µes poss√≠veis de uma senha de 4 d√≠gitos.
28.	Fa√ßa um programa que recebe um CPF e valide se ele √© v√°lido ou n√£o.
29.	Desenvolva um sistema que armazena e gerencia tarefas pendentes.
30.	Crie uma fun√ß√£o que receba um n√∫mero e verifique se ele pertence √† sequ√™ncia de Fibonacci.
________________________________________
Avan√ßado
31.	Desenvolva um algoritmo que resolva um Sudoku 9x9.
32.	Implemente o algoritmo de ordena√ß√£o Merge Sort.
33.	Escreva um programa que resolva um labirinto representado por uma matriz.
34.	Crie um chatbot simples que interage com o usu√°rio usando respostas pr√©-programadas.
35.	Desenvolva um analisador de textos que exiba as palavras mais frequentes em um documento.
36.	Implemente um jogo da forca, permitindo que o usu√°rio jogue contra o programa.
37.	Crie um sistema de login e senha usando hashing para armazenar as senhas.
38.	Desenvolva um simulador de fila de banco usando a estrutura de fila (queue).
39.	Crie um algoritmo que simule o jogo da velha entre dois jogadores.
40.	Implemente uma √°rvore bin√°ria de busca e permita inser√ß√£o e busca de elementos.
________________________________________
Desafios para especialistas
41.	Crie um programa que implemente o algoritmo A* para encontrar o menor caminho em um mapa.
42.	Desenvolva um bot que acesse um site e extraia informa√ß√µes automaticamente (web scraping).
43.	Implemente uma IA que jogue contra o usu√°rio no jogo da velha.
44.	Escreva um programa que detecte faces em imagens usando OpenCV.
45.	Desenvolva um analisador sint√°tico para uma linguagem de programa√ß√£o simples.
46.	Crie um algoritmo que resolva o problema do caixeiro viajante.
47.	Implemente uma rede neural simples para classificar imagens do dataset MNIST.
48.	Desenvolva um simulador de mercado de a√ß√µes que preveja tend√™ncias.
49.	Crie um sistema de recomenda√ß√£o de produtos baseado no hist√≥rico de compras do usu√°rio.
50.	Desenvolva um sistema de reconhecimento de voz simples usando Python.
________________________________________

Aqui est√£o **30 exerc√≠cios de fun√ß√µes em Python**, organizados do **iniciante ao avan√ßado**:

---

## üîπ **N√≠vel Iniciante** (1-10)
1. **Fun√ß√£o sem argumentos**: Crie uma fun√ß√£o `saudacao()` que imprime "Ol√°, mundo!" e a chame.
2. **Fun√ß√£o com um argumento**: Crie uma fun√ß√£o `dobro(n)` que retorna o dobro de um n√∫mero.
3. **Fun√ß√£o com dois argumentos**: Fa√ßa uma fun√ß√£o `soma(a, b)` que retorna a soma de dois n√∫meros.
4. **Fun√ß√£o com retorno**: Crie uma fun√ß√£o `quadrado(x)` que retorna o quadrado de um n√∫mero.
5. **Par√¢metros padr√£o**: Modifique `saudacao(nome="Visitante")` para receber um nome opcional e imprimir "Ol√°, Nome!".
6. **Fun√ß√£o que imprime uma lista**: Crie uma fun√ß√£o `imprimir_lista(lista)` que recebe uma lista e imprime cada elemento.
7. **Fun√ß√£o que verifica se um n√∫mero √© par**: Fa√ßa `eh_par(n)` que retorna `True` se o n√∫mero for par e `False` caso contr√°rio.
8. **Fun√ß√£o com `return` vs `print`**: Crie `diferenca(a, b)` que retorna `a - b`. Teste a diferen√ßa entre `return` e `print`.
9. **Fun√ß√£o que converte temperatura**: Crie `celsius_para_fahrenheit(c)` que converte graus Celsius para Fahrenheit.
10. **Uso de `*args`**: Fa√ßa uma fun√ß√£o `somar_tudo(*numeros)` que aceita m√∫ltiplos argumentos e retorna a soma deles.

---

## üîπ **N√≠vel Intermedi√°rio** (11-20)
11. **Fun√ß√£o recursiva**: Implemente `fatorial(n)` que calcula o fatorial de um n√∫mero.
12. **Fun√ß√£o com `**kwargs`**: Crie `exibir_info(**dados)` que recebe e imprime informa√ß√µes como nome e idade.
13. **Fun√ß√£o que inverte uma string**: Fa√ßa `inverter_string(s)` que retorna uma string invertida.
14. **Fun√ß√£o que encontra o maior n√∫mero**: Crie `maximo(a, b, c)` que retorna o maior entre tr√™s n√∫meros.
15. **Fun√ß√£o com listas**: Fa√ßa `soma_lista(lista)` que soma todos os elementos de uma lista.
16. **Fun√ß√£o que conta vogais**: Implemente `contar_vogais(texto)` que conta vogais em uma string.
17. **Fun√ß√£o que retorna m√∫ltiplos valores**: Fa√ßa `operacoes_basicas(a, b)` que retorna soma, subtra√ß√£o, multiplica√ß√£o e divis√£o.
18. **Fun√ß√£o que remove duplicatas**: Crie `remover_duplicatas(lista)` que remove elementos repetidos de uma lista.
19. **Fun√ß√£o que encontra n√∫meros primos**: Fa√ßa `eh_primo(n)` que verifica se um n√∫mero √© primo.
20. **Uso de lambda functions**: Escreva `dobro_lambda = lambda x: x * 2` e teste.

---

## üîπ **N√≠vel Avan√ßado** (21-30)
21. **Gerador de n√∫meros pares**: Implemente `pares(n)` que gera os primeiros `n` n√∫meros pares usando `yield`.
22. **Fun√ß√£o decoradora**: Crie um decorador `tempo_execucao` que mede o tempo de execu√ß√£o de uma fun√ß√£o.
23. **Memoization com dicion√°rio**: Fa√ßa `fibonacci(n, memo={})` que usa memoization para calcular Fibonacci.
24. **Fun√ß√£o que gera senhas aleat√≥rias**: Implemente `gerar_senha(tamanho)` que gera uma senha aleat√≥ria de `tamanho` caracteres.
25. **Ordena√ß√£o personalizada**: Use `sorted(lista, key=funcao)` para ordenar uma lista de tuplas `(nome, idade)` por idade.
26. **Fun√ß√£o que retorna outra fun√ß√£o**: Fa√ßa `multiplicador(n)` que retorna uma fun√ß√£o que multiplica por `n`.
27. **M√≥dulos e importa√ß√µes**: Crie um m√≥dulo `matematica.py` com `soma()`, `multiplicacao()`, e importe-o em outro arquivo.
28. **Fun√ß√£o que manipula arquivos**: Implemente `ler_arquivo(nome)` que l√™ e imprime o conte√∫do de um arquivo.
29. **Express√µes Regulares**: Crie `validar_email(email)` que verifica se um email √© v√°lido usando regex.
30. **Fun√ß√£o que usa API**: Implemente `obter_dados(url)` que faz uma requisi√ß√£o HTTP e retorna os dados em JSON.

---

Aqui est√° uma lista com **100 exerc√≠cios b√°sicos de Python** para praticar **m√©todos e l√≥gica de programa√ß√£o**. Eles est√£o organizados por t√≥picos para facilitar a sua aprendizagem. üöÄ  

---

## üîπ **1. Entrada, Sa√≠da e Vari√°veis**
1. Pe√ßa ao usu√°rio para digitar seu nome e imprima uma sauda√ß√£o.  
2. Solicite dois n√∫meros inteiros e exiba a soma deles.  
3. Solicite tr√™s n√∫meros e calcule a m√©dia.  
4. Leia um n√∫mero e exiba o seu dobro.  
5. Pe√ßa ao usu√°rio sua idade e exiba o ano em que ele nasceu.  
6. Leia um valor em metros e converta para cent√≠metros e mil√≠metros.  
7. Solicite o sal√°rio de um funcion√°rio e aplique um aumento de 15%.  
8. Pe√ßa ao usu√°rio um n√∫mero e mostre a tabuada desse n√∫mero.  
9. Solicite um valor e exiba o valor com desconto de 10%.  
10. Leia um n√∫mero real e exiba sua parte inteira.  

---

## üîπ **2. Estruturas Condicionais**
11. Verifique se um n√∫mero √© positivo, negativo ou zero.  
12. Pe√ßa dois n√∫meros e informe qual √© o maior.  
13. Leia um n√∫mero e diga se ele √© par ou √≠mpar.  
14. Verifique se um n√∫mero √© m√∫ltiplo de 5.  
15. Solicite uma palavra e diga se ela √© um pal√≠ndromo.  
16. Pe√ßa tr√™s n√∫meros e exiba-os em ordem crescente.  
17. Verifique se um ano √© bissexto.  
18. Pe√ßa ao usu√°rio dois n√∫meros e uma opera√ß√£o (+, -, *, /) e exiba o resultado.  
19. Pe√ßa um n√∫mero e informe se ele est√° entre 10 e 50.  
20. Verifique se uma letra digitada √© vogal ou consoante.  

---

## üîπ **3. Estruturas de Repeti√ß√£o (La√ßos)**
21. Exiba os n√∫meros de 1 a 100.  
22. Exiba os n√∫meros pares de 1 a 50.  
23. Solicite um n√∫mero e exiba os m√∫ltiplos de 3 at√© ele.  
24. Some todos os n√∫meros √≠mpares de 1 a 100.  
25. Exiba a tabuada do 1 ao 10.  
26. Pe√ßa um n√∫mero e exiba os seus divisores.  
27. Leia uma sequ√™ncia de n√∫meros at√© que o usu√°rio digite 0.  
28. Solicite um n√∫mero e exiba sua fatorial.  
29. Pe√ßa um n√∫mero e verifique se ele √© primo.  
30. Gere os primeiros 20 termos da sequ√™ncia de Fibonacci.  

---

## üîπ **4. Listas**
31. Crie uma lista com 10 n√∫meros e exiba o maior e o menor.  
32. Pe√ßa ao usu√°rio 5 nomes e armazene-os em uma lista.  
33. Some todos os elementos de uma lista de n√∫meros.  
34. Conte quantos n√∫meros pares existem em uma lista.  
35. Pe√ßa 10 n√∫meros e exiba a lista em ordem inversa.  
36. Solicite n√∫meros at√© que o usu√°rio digite -1 e exiba a soma deles.  
37. Leia uma lista e remova os n√∫meros duplicados.  
38. Solicite uma lista de palavras e exiba apenas as que t√™m mais de 5 letras.  
39. Pe√ßa ao usu√°rio 10 n√∫meros e exiba os que s√£o primos.  
40. Gere uma lista com os 10 primeiros m√∫ltiplos de 7.  

---

## üîπ **5. Strings**
41. Pe√ßa ao usu√°rio para digitar uma frase e conte quantas vogais existem nela.  
42. Leia um nome completo e exiba apenas o primeiro e o √∫ltimo nome.  
43. Verifique se uma palavra digitada cont√©m a letra "a".  
44. Pe√ßa uma frase e exiba-a ao contr√°rio.  
45. Substitua todas as vogais de uma frase por "*".  
46. Pe√ßa um nome e verifique se ele come√ßa com "A".  
47. Converta uma string para mai√∫sculas sem usar `.upper()`.  
48. Leia uma frase e conte quantas palavras ela possui.  
49. Solicite uma senha e verifique se tem pelo menos 8 caracteres.  
50. Leia uma frase e substitua os espa√ßos por h√≠fens.  

---

## üîπ **6. Dicion√°rios**
51. Crie um dicion√°rio com nome e idade de 5 pessoas.  
52. Solicite ao usu√°rio nome e telefone e armazene em um dicion√°rio.  
53. Pe√ßa ao usu√°rio uma palavra e conte quantas vezes cada letra aparece.  
54. Crie um dicion√°rio representando um aluno com nome, idade e notas.  
55. Leia um dicion√°rio de produtos e exiba apenas os que custam mais de R$50.  
56. Pe√ßa uma palavra e exiba suas letras e quantas vezes aparecem.  
57. Leia um dicion√°rio com nomes e notas de alunos e exiba a m√©dia geral.  
58. Crie um dicion√°rio de estoque de produtos e permita atualizar as quantidades.  
59. Leia um dicion√°rio e inverta chaves e valores.  
60. Crie um dicion√°rio com 5 pa√≠ses e suas capitais e permita buscas.  

---

## üîπ **7. Fun√ß√µes**
61. Escreva uma fun√ß√£o que retorne o maior de tr√™s n√∫meros.  
62. Crie uma fun√ß√£o que retorne o fatorial de um n√∫mero.  
63. Implemente uma fun√ß√£o que verifique se um n√∫mero √© primo.  
64. Escreva uma fun√ß√£o que inverta uma string sem usar `[::-1]`.  
65. Crie uma fun√ß√£o que receba uma lista e retorne apenas os pares.  
66. Implemente uma fun√ß√£o que retorne a m√©dia de uma lista de n√∫meros.  
67. Crie uma fun√ß√£o que receba uma lista e retorne o segundo maior n√∫mero.  
68. Escreva uma fun√ß√£o que determine se uma palavra √© um pal√≠ndromo.  
69. Fa√ßa uma fun√ß√£o que converta decimal para bin√°rio sem usar `bin()`.  
70. Escreva uma fun√ß√£o que ordene uma lista sem usar `.sort()`.  

---

## üîπ **8. Arquivos**
71. Leia um arquivo de texto e exiba seu conte√∫do.  
72. Escreva uma lista de nomes em um arquivo.  
73. Leia um arquivo e conte quantas linhas ele tem.  
74. Crie um programa que copie o conte√∫do de um arquivo para outro.  
75. Escreva n√∫meros de 1 a 100 em um arquivo.  
76. Leia um arquivo e exiba apenas as linhas que cont√™m a palavra "Python".  
77. Crie um arquivo CSV e armazene nomes e idades.  
78. Leia um arquivo e substitua uma palavra por outra.  
79. Pe√ßa ao usu√°rio para digitar e salve tudo em um arquivo.  
80. Leia um arquivo e inverta a ordem das linhas.  

---

## üîπ **9. Extras**
81. Gere 10 n√∫meros aleat√≥rios entre 1 e 100.  
82. Crie um cron√¥metro de contagem regressiva.  
83. Implemente um jogo de adivinha√ß√£o de n√∫meros.  
84. Simule um lan√ßamento de dados.  
85. Pe√ßa um n√∫mero e converta para hexadecimal sem usar `hex()`.  
86. Gere uma senha aleat√≥ria de 8 caracteres.  
87. Simule um sorteio entre 5 nomes.  
88. Converta um n√∫mero para bin√°rio e hexadecimal.  
89. Crie um jogo da forca simples.  
90. Implemente um sistema de cadastro de usu√°rios.  
91. Leia um CPF e valide se √© v√°lido.  
92. Simule um caixa eletr√¥nico.  
93. Implemente um algoritmo de ordena√ß√£o manual.  
94. Construa um rel√≥gio digital com `time.sleep()`.  
95. Crie um chatbot simples.  
96. Leia um n√∫mero romano e converta para decimal.  
97. Simule um sistema de login com senha.  
98. Gere um QR Code a partir de uma URL.  
99. Desenvolva um simulador de dados estat√≠sticos.  
100. Crie um jogo de pedra, papel e tesoura.  

Se precisar de algum c√≥digo espec√≠fico, √© s√≥ pedir! üöÄ
